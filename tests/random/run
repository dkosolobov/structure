#!/usr/bin/env python

import subprocess
import sys
import os
import os.path


tests = []


def startGroup(tests):
    p = {}
    for test in tests:
        # starts all tests
        p[test] = subprocess.Popen(
            args=['../run-test', test],
            stdout=subprocess.PIPE)
    return p


def waitGroup(p, tests):
    time = 0.
    for test in tests:
        # waits tests to finish
        p[test].wait()
        if p[test].returncode != 0:
            print >>sys.stderr, '%s failed' % test
            exit(1)
        stdout = p[test].stdout

        # structure
        time += float(stdout.readline())

    time /= len(tests)
    return time


def printTimes(times):
    for t in times:
        print t[0], '%.3f' % t[1]


def _name(vars, seed):
    return 'random-%04d.%d.cnf' % (vars, seed)


def main():
    times = []
    procs = {}
    seeds = (1, 2, 3, 4, 5)
    varis = [20, 40, 60, 80, 100, 120, 140, 160]

    for v in varis:
        tests = [_name(v, seed) for seed in seeds]
        procs[v] = startGroup(tests)

    for v in varis:
        tests = [_name(v, seed) for seed in seeds]
        time = waitGroup(procs[v], tests)
        times.append(('random-%04d' % v, time))
        print >>sys.stderr, times[-1]

    printTimes(times)


if __name__ == '__main__':
    main()

